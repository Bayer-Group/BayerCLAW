version: 0.2

env:
  variables:
    DOCKER_BUILDKIT: 1
  exported-variables:
    - CORE_STACK_NAME

phases:
  install:
    runtime-versions:
      python: 3.9
    commands:
      - pip install aws-sam-cli
      - pip install -r lambda/tests/requirements.txt

  pre_build:
    commands:
      - pytest -s -vvv lambda/tests/
      - export ACCOUNT_ID=$(echo $CODEBUILD_BUILD_ARN | cut -d':' -f5)
      - export CORE_STACK_NAME=${INSTALLATION_NAME}-core
      # todo: use build id
      - export SOURCE_VERSION=${CODEBUILD_RESOLVED_SOURCE_VERSION:0:7}

  build:
    commands:
#      - cd $CODEBUILD_SRC_DIR
      - sam build -b ./build -s . -t cloudformation/bc_core.yaml
      - >
        sam package
        --template-file build/template.yaml
        --s3-bucket ${RESOURCE_BUCKET_NAME}
        --s3-prefix lambda
        --output-template-file build/packaged.yaml
      - >
        sam deploy
        --template-file build/packaged.yaml
        --stack-name ${CORE_STACK_NAME}
        --capabilities CAPABILITY_NAMED_IAM
        --s3-prefix lambda
        --no-fail-on-empty-changeset
        --parameter-overrides
        AmiId=${AMI_ID_SSM}
        CompilerMacroName=${COMPILER_MACRO_NAME}
        InstallationName=${INSTALLATION_NAME}
        LauncherBucketName=${LAUNCHER_BUCKET_NAME}
        LogRetentionDays=${LOG_RETENTION_DAYS}
        MaxvCpus=${MAX_VCPUS}
        MinvCpus=${MIN_VCPUS}
        ResourceBucketName=${RESOURCE_BUCKET_NAME}
        RootVolumeSize=${ROOT_VOLUME_SIZE}
        ScratchVolumeSize=${SCRATCH_VOLUME_SIZE}
        SecurityGroups=${SECURITY_GROUPS}
        SourceVersion=${SOURCE_VERSION}
        Subnets=${SUBNETS}
        Uniqifier=$(date | md5sum | head -c 16)
        VpcId=${VPC_ID}
      # todo: use SOURCE_VERSION for Uniqifier?
      # todo: rationalize versions & uniqifiers

      - export RUNNER_IMAGE_TAG=$(aws cloudformation describe-stacks --query "Stacks[?StackName=='$CORE_STACK_NAME'][].Outputs[?OutputKey=='RunnerImageUri'].OutputValue" --output text)
      - echo $RUNNER_IMAGE_TAG
      - export LAUNCHER_IMAGE_TAG=$(aws cloudformation describe-stacks --query "Stacks[?StackName=='$CORE_STACK_NAME'][].Outputs[?OutputKey=='JobLauncherImageUri'].OutputValue" --output text)
      - echo $LAUNCHER_IMAGE_TAG

      - cd $CODEBUILD_SRC_DIR/bclaw_runner
      - docker build --build-arg BUILDKIT_INLINE_CACHE=1 --target test -f Dockerfile.alpine .
      - docker build --build-arg BUILDKIT_INLINE_CACHE=1 -t $RUNNER_IMAGE_TAG -f Dockerfile.alpine .

      - cd $CODEBUILD_SRC_DIR/lambda
      # todo: test in container
      - docker build --build-arg BUILDKIT_INLINE_CACHE=1 -t $LAUNCHER_IMAGE_TAG -f src/job_launcher/Dockerfile .

  post_build:
    commands:
      - >
        aws ecr get-login-password --region ${AWS_REGION} |
        docker login --username AWS --password-stdin ${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
      - docker push ${RUNNER_IMAGE_TAG}
      - docker push ${LAUNCHER_IMAGE_TAG}

artifacts:
  discard-paths: yes
  files:
    - cloudformation/wf_launcher.yaml
    - cloudformation/wf_deploy.yaml
