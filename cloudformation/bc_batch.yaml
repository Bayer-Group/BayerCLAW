AWSTemplateFormatVersion: "2010-09-09"

Metadata:
  AWS::Cloudformation::Interface:
    ParameterGroups:
      -
        Label:
          default: Batch
        Parameters:
          - QueueName
          - QueuePriority
      -
        Label:
          default: Compute
        Parameters:
          - AmiId
          - RequestType
          - InstanceTypes
          - MinvCpus
          - MaxvCpus
      -
        Label:
          default: Storage
        Parameters:
          - RootVolumeSize
          - ScratchVolumeSize
      -
        Label:
          default: Network
        Parameters:
          - SecurityGroupIds
          - Subnets
      -
        Label:
          default: Advanced
        Parameters:
          - EFSVolumeId
          - Uniqifier

Parameters:
  AmiId:
    Type: String
    Description: >
      The ID of an Amazon Machine Image (AMI) to create EC2 instances with. Enter "auto" to have Batch
      select an AMI. Otherwise, it is highly recommended that you choose an ECS-optimized Amazon Linux 2
      image to use.
    Default: "auto"

  EFSVolumeId:
    Type: String
    Description: EFS volume to mount, enter "none" for no volume.
    Default: "none"

  InstanceTypes:
    Type: CommaDelimitedList
    Description: >
      A comma-separated list of EC2 instance types to run your jobs on. Enter "optimal" to allow Batch to
      choose a suitable instance type from the M4, C4, or R4 instance families.
    Default: "optimal"

  MaxvCpus:
    Type: Number
    Description: >
      Maximum number of CPUs that Batch will spin up simultaneously.
      Actual maximum may be less depending on EC2 limits in the AWS account.
      Once the maximum is reached, additional jobs will be queued until some jobs finish.
    Default: 256

  MinvCpus:
    Type: Number
    Description: >
      Minimum number of CPUs that Batch will maintain at all times, even when there are no jobs to process.
      Setting this to something greater than zero (e.g. 2) will decrease the Batch cold-start time during testing,
      at the expense of some always-on EC2 instances.
    Default: 0

  QueueName:
    Type: String
    Description: The name of the Batch job queue to create.

  QueuePriority:
    Type: Number
    Description: The priority of the job queue that will be produced.
    Default: 10

  RequestType:
    Type: String
    Description: Request Spot or On-demand EC2 instances to run your jobs on.
    AllowedValues:
      - Spot
      - On-demand
    Default: Spot

  RootVolumeSize:
    Type: Number
    Description: Size (in GB) of the EBS root volume used by Batch jobs.
    Default: 100

  ScratchVolumeSize:
    Type: Number
    Description: Size (in GB) of the EBS scratch volume used by Batch jobs.
    Default: 1000

  SecurityGroupIds:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: >
      Comma-separated list of security group IDs for Batch jobs to run under. Must allow outbound HTTP
      and HTTPS traffic.

  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: >
      Comma-separated list of subnet IDs for Batch jobs to run in. Subnets must have outbound internet access
      either through a direct Internet Gateway connection or through a NAT Gateway.

  Uniqifier:
    Type: String
    Description: >
      This is a string that will be appended to certain resource names to make them unique. May be necessary
      for stack updates in certain cases. Must consist of upper/lowercase letters, numbers, underscores and
      dashes. Default is "None", which will not append any suffix to the resource names.
    Default: "None"
    AllowedPattern : "^[a-zA-Z0-9_-]+$"

Conditions:
  UseAmi: !And [ !Not [!Equals [!Ref AmiId, "Auto"]],
                 !Not [!Equals [!Ref AmiId, "auto"]] ]
  UseSpot: !Equals [!Ref RequestType, "Spot"]
  Uniqify: !And [ !Not [!Equals [!Ref Uniqifier, "None"]],
                  !Not [!Equals [!Ref Uniqifier, "none"]] ]

Resources:
  EcsInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonEC2FullAccess"
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"
        - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"

  EcsInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EcsInstanceRole

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      # launch templates are versioned, so it is probably not necessary to uniqify the name
      LaunchTemplateName: !Sub "${QueueName}-lt"
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              Encrypted: true
              VolumeSize: !Ref RootVolumeSize
              VolumeType: gp3
          - DeviceName: /dev/sdh
            Ebs:
              DeleteOnTermination: true
              Encrypted: true
              VolumeSize: !Ref ScratchVolumeSize
              VolumeType: gp3
        ImageId: !If [UseAmi, !Ref AmiId, !Ref AWS::NoValue]
        InstanceInitiatedShutdownBehavior: terminate
        UserData:
          "Fn::Base64":
            "Fn::Sub": |
              Content-Type: multipart/mixed; boundary="==BOUNDARY=="
              MIME-Version:1.0

              --==BOUNDARY==
              Content-Type: text/x-shellscript; charset="us-ascii"

              #! /bin/bash

              function terminate {
                sudo shutdown -h now
                exit 1
              }

              trap terminate ERR

              # Format and mount the EBS volume
              if file -sL /dev/sdh | grep -q ": data$"; then
                # this device is unformatted
                mkfs -t ext4 /dev/sdh
              fi
              mkdir -p /scratch
              mount /dev/sdh /scratch
              
              if [[ "${EFSVolumeId}" =~ ^fs- ]]; then
                mkdir -p /mnt/efs
                mount -t efs -o tls,ro ${EFSVolumeId}:/ /mnt/efs
              fi
              --==BOUNDARY==--

  ComputeEnvironment:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      ComputeEnvironmentName:
        !If [Uniqify, !Sub "${QueueName}-env-${Uniqifier}", !Sub "${QueueName}-env"]
      Type: MANAGED
      State: ENABLED
      ReplaceComputeEnvironment: false
      ComputeResources:
        Type:
          !If [UseSpot, "SPOT", "EC2"]
        AllocationStrategy:
          !If [UseSpot, "SPOT_CAPACITY_OPTIMIZED", "BEST_FIT_PROGRESSIVE"]
        BidPercentage:
          !If [UseSpot, 100, !Ref AWS::NoValue]
        LaunchTemplate:
          LaunchTemplateId: !Ref LaunchTemplate
          Version: !GetAtt LaunchTemplate.LatestVersionNumber
        InstanceRole: !Ref EcsInstanceProfile
        InstanceTypes: !Ref InstanceTypes
        MinvCpus: !Ref MinvCpus
        MaxvCpus: !Ref MaxvCpus
        SecurityGroupIds: !Ref SecurityGroupIds
        Subnets: !Ref Subnets
        UpdateToLatestImageVersion: true

  SchedulingPolicy:
    Type: AWS::Batch::SchedulingPolicy
    Properties:
      Name: !Sub "${QueueName}-scheduling-policy"

  BatchQueue:
    Type: AWS::Batch::JobQueue
    Properties:
      JobQueueName: !Ref QueueName
      Priority: !Ref QueuePriority
      State: ENABLED
      ComputeEnvironmentOrder:
        - Order: 1
          ComputeEnvironment: !Ref ComputeEnvironment
      SchedulingPolicyArn: !Ref SchedulingPolicy

Outputs:
  BatchQueueArn:
    Value: !Ref BatchQueue
