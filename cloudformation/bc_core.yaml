AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Parameters:
  AmiId:
    Type: String
    Description: >
      The ID of an Amazon Machine Image (AMI) to create EC2 instances with. Enter "Auto" to have Batch
      select an AMI. Otherwise, it is highly recommended that you choose an ECS-optimized Amazon Linux 2
      image to use.
    Default: "auto"

  CentralLoggingDestinationArn:
    Type: String
    Default: "none"

  CompilerMacroName:
    Type: String
    Description: Compiler macro name, change this only for testing and development instances
    Default: "BC_Compiler"

  InstallationName:
    Type: String
    Default: bayerclaw

  LauncherBucketName:
    Type: String
    Description: >
      Use this to specify a custom name for the job launcher S3 bucket. You must make sure that
      this bucket name is globally unique. Enter "Default" to automatically generate a launcher
      bucket name.
    Default: "Default"

  LogRetentionDays:
    Type: Number
    Description: How long to keep CloudWatch log entries, in days.
    AllowedValues: [ 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653 ]
    Default: 30

  MaxvCpus:
    Type: Number
    Description: >
      Maximum number of CPUs that Batch will spin up simultaneously.
      Actual maximum may be less depending on EC2 limits in the AWS account.
      Once the maximum is reached, additional jobs will be queued until some jobs finish.
    Default: 256

  MinvCpus:
    Type: Number
    Description: >
      Minimum number of CPUs that Batch will maintain at all times, even when there are no jobs to process.
      Setting this to something greater than zero (e.g. 2) will decrease the Batch cold-start time during testing,
      at the expense of some always-on EC2 instances.
    Default: 0

  ResourceBucketName:
    Type: String
    Description: S3 bucket containing resources for the main stack

  RootVolumeSize:
    Type: Number
    Description: Size (in GB) of the EBS root volume used by Batch jobs
    Default: 100

  ScratchVolumeSize:
    Type: Number
    Description: Size (in GB) of the EBS scratch volume used by Batch jobs
    Default: 1000

  SecurityGroups:
    Type: String
    Description: >
      Comma-separated list of security group IDs for Batch jobs to run under. Must allow outbound HTTP
      and HTTPS traffic. Enter "Auto" to automatically create a suitable security group.
    Default: Auto

  SourceVersion:
    Type: String

  Subnets:
    Type: CommaDelimitedList
    Description: >
      Comma-separated list of subnet IDs for Batch jobs to run in. Subnets must have internet access
       either through a direct Internet Gateway connection or through a NAT Gateway.

  Uniqifier:
    Type: String
    Description: >
      This is a string that will be appended to certain resource names to make them unique.

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: ID of the VPC where BayerCLAW will live


Conditions:
  MakeLauncherBucketName: !Or [ !Equals [!Ref LauncherBucketName, "Default"],
                                !Equals [!Ref LauncherBucketName, "default"] ]

  MakeSecurityGroup: !Or [ !Equals [!Ref SecurityGroups, "Auto"],
                           !Equals [!Ref SecurityGroups, "auto"] ]


Resources:
  # network
  SecurityGroup:
    Condition: MakeSecurityGroup
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: security group for BayerCLAW EC2 instances
      SecurityGroupEgress:
        -
          IpProtocol: -1
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VpcId

  SecurityGroupIngress:
    Condition: MakeSecurityGroup
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref SecurityGroup
    DependsOn: SecurityGroup

  # launcher bucket
  LauncherBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName:
        !If [MakeLauncherBucketName, !Sub "${InstallationName}-launcher-${AWS::AccountId}", !Ref LauncherBucketName]
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          -
            ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          -
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1
            Status: Enabled
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  # lambdas
  CommonLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub ${AWS::StackName}-bclaw-common
      ContentUri: ../lambda/src/common
      CompatibleRuntimes:
        - python3.7
        - python3.8
        - python3.9

  ChooserLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: multichooser.lambda_handler
      Runtime: python3.9
      CodeUri: lambda/src/chooser
      AutoPublishAlias: current
      MemorySize: 128
      Timeout: 60
      Layers:
        - !Ref CommonLayer
      Policies:
        -
          Version: "2012-10-17"
          Statement:
            -
              Effect: Allow
              Action:
                - "s3:ListBucket"
                - "s3:GetObject"
              Resource: "*"
      DeploymentPreference:
        Enabled: false

  ChooserLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ChooserLambda}"
      RetentionInDays: !Ref LogRetentionDays

  CompilerLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      Runtime: python3.9
      CodeUri: lambda/src/compiler
      AutoPublishAlias: current
      Environment:
        Variables:
          CENTRAL_LOGGING_DESTINATION_ARN: !Ref CentralLoggingDestinationArn
          CORE_STACK_NAME: !Ref "AWS::StackName"
          SOURCE_VERSION: !Ref SourceVersion
          CHOOSER_LAMBDA_ARN: !Ref ChooserLambda.Version
          ECS_TASK_ROLE_ARN: !GetAtt EcsTaskRole.Arn
          NOTIFICATIONS_LAMBDA_ARN: !Ref NotificationsLambda.Version
          GATHER_LAMBDA_ARN: !Ref GatherLambda.Version
          INITIALIZER_LAMBDA_ARN: !Ref InitializerLambda.Version
          JOB_LAUNCHER_REPO_URI: !GetAtt JobLauncherRepo.RepositoryUri
          LAUNCHER_BUCKET_NAME: !Ref LauncherBucket
          LOG_RETENTION_DAYS: !Ref LogRetentionDays
          ON_DEMAND_QUEUE_ARN: !GetAtt OnDemandQueueStack.Outputs.BatchQueueArn
          QC_CHECKER_LAMBDA_ARN: !Ref QCCheckerLambda.Version
          RESOURCE_BUCKET_NAME: !Ref ResourceBucketName
          RUNNER_REPO_URI: !GetAtt RunnerRepo.RepositoryUri
          SCATTER_LAMBDA_ARN: !Ref ScatterLambda.Version
          SPOT_QUEUE_ARN: !GetAtt SpotQueueStack.Outputs.BatchQueueArn
          STATES_EXECUTION_ROLE_ARN: !GetAtt StatesExecutionRole.Arn
          SUBPIPES_LAMBDA_ARN: !Ref SubpipesLambda.Version
          VERSIONATOR_LAMBDA_ARN: !Ref VersionatorLambda.Version
      MemorySize: 128
      Timeout: 900
      Layers:
        - !Ref CommonLayer
      Policies:
        -
          Version: "2012-10-17"
          Statement:
            -
              Effect: Allow
              Action:
                - "s3:PutObject"
              Resource: !Sub "arn:${AWS::Partition}:s3:::${ResourceBucketName}/*"
            -
              Effect: Allow
              Action:
                - "cloudformation:DescribeStacks"
              Resource: !Ref "AWS::StackId"
      DeploymentPreference:
        Enabled: false

  CompilerLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${CompilerLambda}"
      RetentionInDays: !Ref LogRetentionDays

  InitializerLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: initializer.lambda_handler
      Runtime: python3.9
      CodeUri: lambda/src/initializer
      AutoPublishAlias: current
      MemorySize: 128
      Timeout: 900
      Layers:
        - !Ref CommonLayer
      Policies:
        -
          Version: "2012-10-17"
          Statement:
            -
              Effect: Allow
              Action:
                - "s3:PutObject"
                - "s3:GetObjectVersion"
                - "s3:ListBucket"
              Resource: "*"
      DeploymentPreference:
        Enabled: false

  InitializerLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${InitializerLambda}"
      RetentionInDays: !Ref LogRetentionDays

  ScatterLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: scatter.lambda_handler
      Runtime: python3.9
      CodeUri: lambda/src/scatter
      AutoPublishAlias: current
      MemorySize: 128
      Timeout: 900
      Layers:
        - !Ref CommonLayer
      Policies:
        -
          Version: "2012-10-17"
          Statement:
            -
              Effect: Allow
              Action:
                - "s3:PutObject"
                - "s3:GetObject"
                - "s3:ListBucket"
              Resource: "*"
      DeploymentPreference:
        Enabled: false

  ScatterLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ScatterLambda}"
      RetentionInDays: !Ref LogRetentionDays

  GatherLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: gather.lambda_handler
      Runtime: python3.9
      CodeUri: lambda/src/gather
      AutoPublishAlias: current
      MemorySize: 128
      Timeout: 900
      Layers:
        - !Ref CommonLayer
      Policies:
        -
          Version: "2012-10-17"
          Statement:
            -
              Effect: Allow
              Action:
                - "s3:PutObject"
                - "s3:GetObject"
                - "s3:ListBucket"
              Resource: "*"
      DeploymentPreference:
        Enabled: false

  GatherLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${GatherLambda}"
      RetentionInDays: !Ref LogRetentionDays

  QCCheckerLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: qc_checker.lambda_handler
      Runtime: python3.9
      CodeUri: lambda/src/qc_checker
      AutoPublishAlias: current
      MemorySize: 128
      Timeout: 60
      Layers:
        - !Ref CommonLayer
      Policies:
        -
          Version: "2012-10-17"
          Statement:
            -
              Effect: Allow
              Action:
                - "s3:ListBucket"
                - "s3:GetObject"
              Resource: "*"
            -
              Effect: Allow
              Action:
                - states:StopExecution
              Resource: "*"
      DeploymentPreference:
        Enabled: false

  QCCheckerLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${QCCheckerLambda}"
      RetentionInDays: !Ref LogRetentionDays

  SubpipesLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: subpipes.lambda_handler
      Runtime: python3.9
      CodeUri: lambda/src/subpipes
      AutoPublishAlias: current
      MemorySize: 128
      Timeout: 900
      Layers:
        - !Ref CommonLayer
      Policies:
        -
          Version: "2012-10-17"
          Statement:
            -
              Effect: Allow
              Action:
                - "s3:PutObject"
                - "s3:GetObject"
                - "s3:ListBucket"
              Resource: "*"
      DeploymentPreference:
        Enabled: false

  SubpipesLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${SubpipesLambda}"
      RetentionInDays: !Ref LogRetentionDays

  NotificationsLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: notifications.lambda_handler
      Runtime: python3.9
      CodeUri: lambda/src/notifications
      AutoPublishAlias: current
      MemorySize: 128
      Timeout: 60
      Layers:
        - !Ref CommonLayer
      Policies:
        -
          Version: "2012-10-17"
          Statement:
            -
              Effect: Allow
              Action:
                - "sns:Publish"
              Resource: "*"
      DeploymentPreference:
        Enabled: False

  PermissionToInvokeNotificationsLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref NotificationsLambda.Version
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceAccount: !Ref AWS::AccountId

  NotificationsLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${NotificationsLambda}"
      RetentionInDays: !Ref LogRetentionDays

  VersionatorLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: versionator.lambda_handler
      Runtime: python3.9
      CodeUri: lambda/src/versionator
      AutoPublishAlias: current
      MemorySize: 128
      Timeout: 60
      Layers:
        - !Ref CommonLayer
      Policies:
        -
          Version: "2012-10-17"
          Statement:
            -
              Effect: Allow
              Action:
                - "lambda:PublishVersion"
              Resource: "*"
      DeploymentPreference:
        Enabled: False

  VersionatorLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${VersionatorLambda}"
      RetentionInDays: !Ref LogRetentionDays

  # todo: remove
#  JobStatusLambda:
#    Type: AWS::Serverless::Function
#    Properties:
#      Handler: job_status.lambda_handler
#      Runtime: python3.9
#      CodeUri: lambda/src/job_status
#      Environment:
#        Variables:
#          JOB_STATUS_TABLE: !Ref JobStatusTable
#          EXPIRATION_DAYS: "90"
#      MemorySize: 128
#      Timeout: 60
#      Policies:
#        -
#          Version: "2012-10-17"
#          Statement:
#            -
#              Effect: Allow
#              Action:
#                - "dynamodb:DescribeTable"
#                - "dynamodb:PutItem"
#                - "dynamodb:UpdateItem"
#              Resource: !GetAtt JobStatusTable.Arn
#      DeploymentPreference:
#        Enabled: False

#  PermissionToInvokeJobStatusLambda:
#    Type: AWS::Lambda::Permission
#    Properties:
#      FunctionName: !Ref JobStatusLambda
#      Action: lambda:InvokeFunction
#      Principal: sns.amazonaws.com
#      SourceAccount: !Ref AWS::AccountId

#  JobStatusLambdaLogGroup:
#    Type: AWS::Logs::LogGroup
#    Properties:
#      LogGroupName: !Sub "/aws/lambda/${JobStatusLambda}"
#      RetentionInDays: !Ref LogRetentionDays

  CompilerMacro:
    Type: AWS::CloudFormation::Macro
    Properties:
      Name: !Ref CompilerMacroName
      Description: "bclaw compiler"
      FunctionName: !Ref CompilerLambda

  # step functions
  StatesExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Join [".", [ "states", !Ref "AWS::Region", "amazonaws.com"] ]
            Action:
              - "sts:AssumeRole"

  StatesExecutionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: StatesExecutionPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: "lambda:InvokeFunction"
            Resource: "*"
          - Effect: Allow
            Action: "SNS:Publish"
            Resource: "*"
          - Effect: Allow
            Action:
              - "batch:SubmitJob"
              - "batch:DescribeJobs"
              - "batch:TerminateJob"
            Resource: "*"
          - Effect: Allow
            Action:
              - "events:PutTargets"
              - "events:PutRule"
              - "events:DescribeRule"
            Resource: !Sub arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctionsGetEventsForBatchJobsRule
          - Effect: Allow
            Action:
              - "events:PutTargets"
              - "events:PutRule"
              - "events:DescribeRule"
            Resource: !Sub arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctionsGetEventsForStepFunctionsExecutionRule
          - Effect: Allow
            Action:
              - "states:StartExecution"
              - "states:DescribeExecution"
              - "states:StopExecution"
            Resource: "*"
      Roles:
        - !Ref StatesExecutionRole

  # batch
  EcsTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ecs-tasks.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonEC2FullAccess"
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
        - "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess"
      Policies:
        -
          PolicyName: "ECRAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                Resource: "*"


  SpotQueueStack:
    Type: AWS::Serverless::Application
    Properties:
      Location: bc_batch.yaml
      Parameters:
        AmiId: !Ref AmiId
        MaxvCpus: !Ref MaxvCpus
        MinvCpus: !Ref MinvCpus
        QueueName: !Sub ${AWS::StackName}-spot-queue
        RequestType: "Spot"
        RootVolumeSize: !Ref RootVolumeSize
        ScratchVolumeSize: !Ref ScratchVolumeSize
        SecurityGroupIds:
          !If [MakeSecurityGroup, !GetAtt SecurityGroup.GroupId, !Ref SecurityGroups]
        Subnets: !Join [",", !Ref Subnets]
        Uniqifier: !Ref Uniqifier

  OnDemandQueueStack:
    Type: AWS::Serverless::Application
    Properties:
      Location: bc_batch.yaml
      Parameters:
        AmiId: !Ref AmiId
        MaxvCpus: !Ref MaxvCpus
        MinvCpus: !Ref MinvCpus
        QueueName: !Sub ${AWS::StackName}-on-demand-queue
        RequestType: "On-demand"
        RootVolumeSize: !Ref RootVolumeSize
        ScratchVolumeSize: !Ref ScratchVolumeSize
        SecurityGroupIds:
          !If [MakeSecurityGroup, !GetAtt SecurityGroup.GroupId, !Ref SecurityGroups]
        Subnets: !Join [",", !Ref Subnets]
        Uniqifier: !Ref Uniqifier

  # dynamodb
#  JobStatusTable:
#    Type: AWS::DynamoDB::Table
#    Properties:
#      AttributeDefinitions:
#        -
#          AttributeName: "workflowName"
#          AttributeType: "S"
#        -
#          AttributeName: "executionId"
#          AttributeType: "S"
#        -
#          AttributeName: "timestamp"
#          AttributeType: "N"
#        -
#          AttributeName: "jobFile"
#          AttributeType: "S"
#      KeySchema:
#        -
#          AttributeName: "workflowName"
#          KeyType: "HASH"
#        -
#          AttributeName: "executionId"
#          KeyType: "RANGE"
#      LocalSecondaryIndexes:
#        -
#          IndexName: executionsByTimestamp
#          KeySchema:
#            -
#              AttributeName: "workflowName"
#              KeyType: "HASH"
#            -
#              AttributeName: "timestamp"
#              KeyType: "RANGE"
#          Projection:
#            ProjectionType: INCLUDE
#            NonKeyAttributes:
#              - "executionId"
#              - "jobFile"
#              - "status"
#        -
#          IndexName: executionsByJobFile
#          KeySchema:
#            -
#              AttributeName: "workflowName"
#              KeyType: "HASH"
#            -
#              AttributeName: "jobFile"
#              KeyType: "RANGE"
#          Projection:
#            ProjectionType: INCLUDE
#            NonKeyAttributes:
#              - "executionId"
#              - "timestamp"
#              - "status"
#      TimeToLiveSpecification:
#        AttributeName: "expiration"
#        Enabled: true
#      BillingMode: PAY_PER_REQUEST

  # ecr repositories
  RunnerRepo:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub "${AWS::StackName}/runner"
      ImageTagMutability: IMMUTABLE

  JobLauncherRepo:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub "${AWS::StackName}/launcher"
      ImageTagMutability: IMMUTABLE

Outputs:
  ChooserLambdaArn:
    Value: !Ref ChooserLambda.Version

  ChooserLambdaLogGroupName:
    Value: !Ref ChooserLambdaLogGroup

  ECSTaskRoleArn:
    Value: !GetAtt EcsTaskRole.Arn

  NotificationsLambdaArn:
    Value: !Ref NotificationsLambda.Version

  GatherLambdaArn:
    Value: !Ref GatherLambda.Version

  GatherLambdaLogGroupName:
    Value: !Ref GatherLambdaLogGroup

  InitializerLambdaArn:
    Value: !Ref InitializerLambda.Version

  InitializerLambdaLogGroupName:
    Value: !Ref InitializerLambdaLogGroup

  JobLauncherImageUri:
    Value: !Sub
      - "${repo}:${tag}"
      - repo: !GetAtt JobLauncherRepo.RepositoryUri
        tag: !Ref SourceVersion

#  JobStatusLambdaArn:
#    Value: !GetAtt JobStatusLambda.Arn

#  JobStatusTableName:
#    Value: !Ref JobStatusTable

  LauncherBucketName:
    Value: !Ref LauncherBucket

  LogRetentionDays:
    Value: !Ref LogRetentionDays

  OnDemandQueueArn:
    Value: !GetAtt OnDemandQueueStack.Outputs.BatchQueueArn

  QCCheckerLambdaArn:
    Value: !Ref QCCheckerLambda.Version

  QCCheckerLambdaLogGroupName:
    Value: !Ref QCCheckerLambdaLogGroup

  ResourceBucketName:
    Value: !Ref ResourceBucketName

  RunnerImageUri:
    Value: !Sub
      - "${repo}:${tag}"
      - repo: !GetAtt RunnerRepo.RepositoryUri
        tag: !Ref SourceVersion

  ScatterLambdaArn:
    Value: !Ref ScatterLambda.Version

  ScatterLambdaLogGroupName:
    Value: !Ref ScatterLambdaLogGroup

  SecurityGroupIds:
    Value: !If [MakeSecurityGroup, !GetAtt SecurityGroup.GroupId, !Ref SecurityGroups]

  SpotQueueArn:
    Value: !GetAtt SpotQueueStack.Outputs.BatchQueueArn

  StatesExecutionRoleArn:
    Value: !GetAtt StatesExecutionRole.Arn

  SubpipesLambdaArn:
    Value: !Ref SubpipesLambda.Version

  SubpipesLambdaLogGroupName:
    Value: !Ref SubpipesLambdaLogGroup

  VersionatorLambdaArn:
    Value: !Ref VersionatorLambda.Version

  VersionatorLambdaLogGroupName:
    Value: !Ref VersionatorLambdaLogGroup
