AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  LauncherBucketName:
    Type: String

  LauncherLambdaName:
    Type: String

  LauncherLambdaVersion:
    Type: String

  NotificationsLambdaArn:
    Type: String

  StateMachineArn:
    Type: String

  WorkflowName:
    Type: String

Resources:
  # notifications
  wfNotificationsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "${WorkflowName}-notifications"
      KmsMasterKeyId: "alias/aws/sns"

  wfNotificationsTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref wfNotificationsTopic
      PolicyDocument:
        Version: "2012-10-17"
        Id: "wfNotificationsTopicPolicy"
        Statement:
          -
            Sid: OwnerAccessOnly
            Effect: Allow
            Principal:
              AWS: "*"
            Action:
              - "SNS:AddPermission"
              - "SNS:DeleteTopic"
              - "SNS:GetTopicAttributes"
              - "SNS:ListSubscriptionsByTopic"
              - "SNS:Publish"
              - "SNS:Receive"
              - "SNS:RemovePermission"
              - "SNS:SetTopicAttributes"
              - "SNS:Subscribe"
            Resource: !Ref wfNotificationsTopic
            Condition:
              StringEquals:
                "AWS:SourceOwner": !Ref AWS::AccountId
          -
            Sid: SecureTransport
            Effect: Deny
            Principal: "*"
            Action: "sns:Publish"
            Resource: !Ref wfNotificationsTopic
            Condition:
              Bool:
                "aws:SecureTransport": "false"

  wfNotificationsRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.states
        detail-type:
          - Step Functions Execution Status Change
        detail:
          stateMachineArn:
            - !Ref StateMachineArn
      State: DISABLED
      Targets:
        -
          Arn: !Ref NotificationsLambdaArn
          Id: HandlerLambdaTargetId
          InputTransformer:
            InputPathsMap:
              detail: "$.detail"
            InputTemplate:
              !Sub |-
                {
                  "workflow_name": "${WorkflowName}",
                  "sns_topic_arn": "${wfNotificationsTopic}",
                  "event": <aws.events.event>,
                  "detail": <detail>
                }

  # code deploy
  wfCodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ComputePlatform: Lambda

  wfCodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - "codedeploy.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSCodeDeployRoleForLambda"

  wfDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref wfCodeDeployApplication
      AutoRollbackConfiguration:
        Enabled: true
        Events:
          - DEPLOYMENT_FAILURE
          - DEPLOYMENT_STOP_ON_ALARM
          - DEPLOYMENT_STOP_ON_REQUEST
      DeploymentConfigName: CodeDeployDefault.LambdaAllAtOnce
      DeploymentStyle:
        DeploymentType: BLUE_GREEN
        DeploymentOption: WITH_TRAFFIC_CONTROL
      ServiceRoleArn: !GetAtt wfCodeDeployRole.Arn

  wfLauncherLambdaAliasLive:
    Type: AWS::Lambda::Alias
    UpdatePolicy:
      CodeDeployLambdaAliasUpdate:
        ApplicationName: !Ref wfCodeDeployApplication
        DeploymentGroupName: !Ref wfDeploymentGroup
    Properties:
      Name: live
      FunctionName: !Ref LauncherLambdaName
      FunctionVersion: !Ref LauncherLambdaVersion

  # trigger
  wfDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      SqsManagedSseEnabled: true

  wfDLQPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !GetAtt wfDeadLetterQueue.QueueName
      PolicyDocument:
        Version: 2012-10-17
        Id: wfDLQPolicyID
        Statement:
          -
            Sid: "wfEventRuleToDLQ"
            Effect: Allow
            Principal:
              AWS: "*"
            Action: "sqs:SendMessage"
            Resource:
              - !GetAtt wfDeadLetterQueue.Arn
            Condition:
              ArnEquals:
                "aws:SourceArn": !GetAtt wfTriggerRule.Arn
          -
            Effect: Deny
            Principal: "*"
            Action: "sqs:SendMessage"
            Resource:
              - !GetAtt wfDeadLetterQueue.Arn
            Condition:
              Bool:
                "aws:SecureTransport": "false"

  wfTriggerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonSQSFullAccess"

  wfTriggerRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "${WorkflowName}"
      EventBusName: default
      EventPattern:
        source:
          - "aws.s3"
        detail-type:
          - "Object Created"
        detail:
          bucket:
            name:
              - !Ref LauncherBucketName
          object:
            key:
              -
                prefix: !Sub "${WorkflowName}/"
      State: DISABLED
      RoleArn: !GetAtt wfTriggerRole.Arn
      Targets:
        -
          Arn: !Ref wfLauncherLambdaAliasLive
          DeadLetterConfig:
            Arn: !GetAtt wfDeadLetterQueue.Arn
          Id: launcher-lambda-target
          InputTransformer:
            InputPathsMap:
              bucket: "$.detail.bucket.name"
              key: "$.detail.object.key"
              version: "$.detail.object.version-id"
              replay: "$.replay-name"
            InputTemplate: >-
              {
                "branch": "main",
                "job_file_bucket": <bucket>,
                "job_file_key": <key>,
                "job_file_version": <version>,
                "replay": <replay>
              }

  PermissionToInvokeLauncher:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref wfLauncherLambdaAliasLive
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt wfTriggerRule.Arn

  wfEventArchive:
    Type: AWS::Events::Archive
    Properties:
      ArchiveName: !Sub "${WorkflowName}-events"
      SourceArn: !Sub arn:aws:events:${AWS::Region}:${AWS::AccountId}:event-bus/default
      EventPattern:
        source:
          - "aws.s3"
        detail-type:
          - "Object Created"
        detail:
          bucket:
            name:
              - !Ref LauncherBucketName
          object:
            key:
              -
                prefix: !Sub "${WorkflowName}/"

Outputs:
  wfNotificationsTopicArn:
    Value: !Ref wfNotificationsTopic
